@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Tartak.WebApp.Client.Model
@using Tartak.WebApp.Shared.Models
@inject NavigationManager navManager
@inject HttpClient Http
@inject User user
@if (!user.IsLoggedIn)
{
    <PageTitle>Log in</PageTitle>

<AuthorizeView style="justify-content: center;display: flex;">
    <NotAuthorized >
        <div style="max-width: 300px;">
        <div class="form-group row m-b-15">
            <label class="col-md-3 col-form-label">Username</label>
            <div class="col-md-7">
                <input @bind-value="Username" type="text" class="form-control" placeholder=" Enter username" />
            </div>
        </div>
        <div class="form-group row m-b-15">
            <label class="col-md-3 col-form-label">Password</label>
            <div class="col-md-7">
                <input @bind-value="Password" type="password" class="form-control" placeholder="Enter password" />
            </div>
        </div>
        <button type="submit" @onclick="LoginUser" class="btn btn-sm btn-primary m-r-5">Login</button>
        </div>
    </NotAuthorized>
</AuthorizeView>
}

<br />

@Message

@code {
    string Username;
    string Password;
    string Message;

    protected override async Task OnInitializedAsync()
    {
        user.UserStatusChanged += async (object? sender, EventArgs args) => await InvokeAsync(() =>
                                                                                {
                                                                                    StateHasChanged();
                                                                                });
    }

    private async void LoginUser()
    {
        try
        {
            Dictionary<string, string> items = new Dictionary<string, string>();
            items.Add("userName", Username);
            items.Add("password", Password);

            var data = new FormUrlEncodedContent(items);

            using (HttpResponseMessage response = await Http.PostAsync("/Token", data))
            {
                if (response.IsSuccessStatusCode)
                {
                    AuthenticatedUser? output = await response.Content.ReadFromJsonAsync<AuthenticatedUser>();
                    user.Token = output.access_token;
                    user.Name = output.userName;
                    user.IsLoggedIn = true;
                    Username = "";
                    Password = "";
                    Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {user.Token}");
                    var resp = await Http.GetAsync("api/User");
                    if (resp.IsSuccessStatusCode)
                    {
                        var appuser = await resp.Content.ReadFromJsonAsync<ApplicationUser>();
                        user.Id = appuser.Id;
                        user.IsAdmin = appuser.Roles.Contains("Admin");
                        user.IsManager = appuser.Roles.Contains("Manager") || user.IsAdmin;
                        user.UserLoggedIn();
                    }
                    else{
                        user.UserLoggedOut();
                    }
                    await InvokeAsync(() =>
                            {
                            StateHasChanged();
                            });
                }
                else
                {
                    throw new Exception(response.ReasonPhrase);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
